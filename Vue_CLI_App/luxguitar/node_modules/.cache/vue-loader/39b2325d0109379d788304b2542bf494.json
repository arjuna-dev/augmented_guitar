{"remainingRequest":"/Users/i5/Documents/mydocs/CODE/5th Semester/_code/web app cli/luxguitar/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/i5/Documents/mydocs/CODE/5th Semester/_code/web app cli/luxguitar/src/components/Fretboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/i5/Documents/mydocs/CODE/5th Semester/_code/web app cli/luxguitar/src/components/Fretboard.vue","mtime":1618912550000},{"path":"/Users/i5/Documents/mydocs/CODE/5th Semester/_code/web app cli/luxguitar/node_modules/cache-loader/dist/cjs.js","mtime":1615556830000},{"path":"/Users/i5/Documents/mydocs/CODE/5th Semester/_code/web app cli/luxguitar/node_modules/babel-loader/lib/index.js","mtime":1615556821000},{"path":"/Users/i5/Documents/mydocs/CODE/5th Semester/_code/web app cli/luxguitar/node_modules/cache-loader/dist/cjs.js","mtime":1615556830000},{"path":"/Users/i5/Documents/mydocs/CODE/5th Semester/_code/web app cli/luxguitar/node_modules/vue-loader/lib/index.js","mtime":1615556831000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport fretSlot from \"../utils/fretSlot\";\n\nexport default {\n  name: \"Fretboard\",\n  data() {\n    return {\n      numberOfStrings: 6,\n      numberOfFrets: 20,\n      stringLength: 647.7,\n      notes: [\n        \"C\",\n        \"C♯/D♭\",\n        \"D\",\n        \"D♯/E♭\",\n        \"E\",\n        \"F\",\n        \"F♯/G♭\",\n        \"G\",\n        \"G♯/A♭\",\n        \"A\",\n        \"A♯/B♭\",\n        \"B\"\n      ],\n      colors: [\n        \"#7FDBFF\",\n        \"#39CCCC\",\n        \"#3D9970\",\n        \"#2ECC40\",\n        \"#01FF70\",\n        \"#FFDC00\",\n        \"#FF851B\",\n        \"#FF4136\",\n        \"#85144b\",\n        \"#F012BE\",\n        \"#B10DC9\",\n        \"#0074D9\"\n      ],\n      tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"],\n      areCircles: true,\n      notePattern: []\n    };\n  },\n  computed: {\n    fretboardSlotsAmount: function() {\n      return this.numberOfStrings * this.numberOfFrets;\n    },\n    fretDistances() {\n      let fretDist = [];\n      // Adjustment for screen resolution distance discrepancies\n      let newLength = this.stringLength * 0.867469097;\n      // let newLength = this.stringLength * 0.85981;\n      // let newLength = this.stringLength * 0.85981551561;\n      for (let i = 0; i < this.numberOfFrets; i++) {\n        let d = newLength / 17.817;\n        fretDist.push(d);\n        newLength = newLength - d;\n      }\n      // We substract the edge of the display on the side of the guitar nut\n      fretDist[0] -= 3.37;\n      return fretDist;\n    },\n    fretboardLength() {\n      return this.fretDistances.reduce((sum, elem) => sum + elem);\n    },\n    fretboardGridStyle() {\n      let fretDist = this.fretDistances.join(\"mm \");\n      return {\n        gridTemplateColumns: fretDist + \"mm\",\n        gridTemplateRows: \"repeat(\" + this.numberOfStrings + \", 1fr )\",\n        width: this.fretboardLength + \"mm\"\n      };\n    }\n  },\n  methods: {\n    debug() {\n      console.log(this.fretboardSlots);\n    },\n    fretboardSlots(selectedNotes) {\n      let fretboardSlots = [];\n      for (let i = this.tuning.length - 1; i >= 0; i--) {\n        let firstNoteOfString = this.tuning[i];\n        for (let j = 0; j < this.numberOfFrets; j++) {\n          let noteIndex = (j + this.notes.indexOf(firstNoteOfString) + 1) % 12;\n          let note = this.notes[noteIndex];\n          let color = \"\";\n          if (selectedNotes.includes(noteIndex)) {\n            color = this.colors[noteIndex];\n            fretboardSlots.push(\n              new fretSlot(note, i, j, color, note, this.areCircles)\n            );\n          } else if (selectedNotes.length > 0) {\n            color = \"black\";\n            fretboardSlots.push(\n              new fretSlot(\n                note,\n                i,\n                j,\n                color,\n                \"\",\n                this.areCircles,\n                \"1px solid white\"\n              )\n            );\n          } else {\n            color = this.colors[noteIndex];\n            fretboardSlots.push(\n              new fretSlot(note, i, j, color, note, this.areCircles)\n            );\n          }\n        }\n      }\n      return fretboardSlots;\n    },\n    fretStyle(fretSlot) {\n      if (fretSlot.isCircle == true) {\n        return {\n          display: \"grid\",\n          placeItems: \"center\",\n          backgroundColor: fretSlot.color,\n          width: \"20px\",\n          height: \"20px\",\n          borderRadius: \"50%\",\n          border: fretSlot.border\n        };\n      } else {\n        return {\n          display: \"grid\",\n          placeItems: \"center\",\n          backgroundColor: fretSlot.color,\n          width: \"100%\",\n          height: \"100%\"\n        };\n      }\n    }\n  },\n  mounted() {\n    this.$parent.$on(\"note-pattern\", data => {\n      this.notePattern = data;\n    });\n    this.$parent.$on(\"are-circles\", data => {\n      console.log(data);\n      this.areCircles = data;\n    });\n  }\n};\n",{"version":3,"sources":["Fretboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"Fretboard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"the-grid\" :style=\"fretboardGridStyle\" @click=\"debug\">\n      <div\n        v-bind:style=\"{ display: 'grid', placeItems: 'center' }\"\n        v-for=\"(fretSlot, index) in fretboardSlots(notePattern)\"\n        :key=\"index\"\n      >\n        <div :style=\"fretStyle(fretSlot)\">\n          {{ fretSlot.text }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport fretSlot from \"../utils/fretSlot\";\n\nexport default {\n  name: \"Fretboard\",\n  data() {\n    return {\n      numberOfStrings: 6,\n      numberOfFrets: 20,\n      stringLength: 647.7,\n      notes: [\n        \"C\",\n        \"C♯/D♭\",\n        \"D\",\n        \"D♯/E♭\",\n        \"E\",\n        \"F\",\n        \"F♯/G♭\",\n        \"G\",\n        \"G♯/A♭\",\n        \"A\",\n        \"A♯/B♭\",\n        \"B\"\n      ],\n      colors: [\n        \"#7FDBFF\",\n        \"#39CCCC\",\n        \"#3D9970\",\n        \"#2ECC40\",\n        \"#01FF70\",\n        \"#FFDC00\",\n        \"#FF851B\",\n        \"#FF4136\",\n        \"#85144b\",\n        \"#F012BE\",\n        \"#B10DC9\",\n        \"#0074D9\"\n      ],\n      tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"],\n      areCircles: true,\n      notePattern: []\n    };\n  },\n  computed: {\n    fretboardSlotsAmount: function() {\n      return this.numberOfStrings * this.numberOfFrets;\n    },\n    fretDistances() {\n      let fretDist = [];\n      // Adjustment for screen resolution distance discrepancies\n      let newLength = this.stringLength * 0.867469097;\n      // let newLength = this.stringLength * 0.85981;\n      // let newLength = this.stringLength * 0.85981551561;\n      for (let i = 0; i < this.numberOfFrets; i++) {\n        let d = newLength / 17.817;\n        fretDist.push(d);\n        newLength = newLength - d;\n      }\n      // We substract the edge of the display on the side of the guitar nut\n      fretDist[0] -= 3.37;\n      return fretDist;\n    },\n    fretboardLength() {\n      return this.fretDistances.reduce((sum, elem) => sum + elem);\n    },\n    fretboardGridStyle() {\n      let fretDist = this.fretDistances.join(\"mm \");\n      return {\n        gridTemplateColumns: fretDist + \"mm\",\n        gridTemplateRows: \"repeat(\" + this.numberOfStrings + \", 1fr )\",\n        width: this.fretboardLength + \"mm\"\n      };\n    }\n  },\n  methods: {\n    debug() {\n      console.log(this.fretboardSlots);\n    },\n    fretboardSlots(selectedNotes) {\n      let fretboardSlots = [];\n      for (let i = this.tuning.length - 1; i >= 0; i--) {\n        let firstNoteOfString = this.tuning[i];\n        for (let j = 0; j < this.numberOfFrets; j++) {\n          let noteIndex = (j + this.notes.indexOf(firstNoteOfString) + 1) % 12;\n          let note = this.notes[noteIndex];\n          let color = \"\";\n          if (selectedNotes.includes(noteIndex)) {\n            color = this.colors[noteIndex];\n            fretboardSlots.push(\n              new fretSlot(note, i, j, color, note, this.areCircles)\n            );\n          } else if (selectedNotes.length > 0) {\n            color = \"black\";\n            fretboardSlots.push(\n              new fretSlot(\n                note,\n                i,\n                j,\n                color,\n                \"\",\n                this.areCircles,\n                \"1px solid white\"\n              )\n            );\n          } else {\n            color = this.colors[noteIndex];\n            fretboardSlots.push(\n              new fretSlot(note, i, j, color, note, this.areCircles)\n            );\n          }\n        }\n      }\n      return fretboardSlots;\n    },\n    fretStyle(fretSlot) {\n      if (fretSlot.isCircle == true) {\n        return {\n          display: \"grid\",\n          placeItems: \"center\",\n          backgroundColor: fretSlot.color,\n          width: \"20px\",\n          height: \"20px\",\n          borderRadius: \"50%\",\n          border: fretSlot.border\n        };\n      } else {\n        return {\n          display: \"grid\",\n          placeItems: \"center\",\n          backgroundColor: fretSlot.color,\n          width: \"100%\",\n          height: \"100%\"\n        };\n      }\n    }\n  },\n  mounted() {\n    this.$parent.$on(\"note-pattern\", data => {\n      this.notePattern = data;\n    });\n    this.$parent.$on(\"are-circles\", data => {\n      console.log(data);\n      this.areCircles = data;\n    });\n  }\n};\n</script>\n\n<style scoped>\n.the-grid {\n  display: grid;\n  height: 100%;\n  background-color: black;\n}\n</style>\n"]}]}