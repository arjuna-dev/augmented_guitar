{"remainingRequest":"/Users/i5/Documents/Documents/Docs/CODE/5th Semester/APP.cli/luxguitar/node_modules/babel-loader/lib/index.js!/Users/i5/Documents/Documents/Docs/CODE/5th Semester/APP.cli/luxguitar/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/i5/Documents/Documents/Docs/CODE/5th Semester/APP.cli/luxguitar/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/i5/Documents/Documents/Docs/CODE/5th Semester/APP.cli/luxguitar/src/components/Fretboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/i5/Documents/Documents/Docs/CODE/5th Semester/APP.cli/luxguitar/src/components/Fretboard.vue","mtime":1618912550846},{"path":"/Users/i5/Documents/Documents/Docs/CODE/5th Semester/APP.cli/luxguitar/node_modules/cache-loader/dist/cjs.js","mtime":1615556830744},{"path":"/Users/i5/Documents/Documents/Docs/CODE/5th Semester/APP.cli/luxguitar/node_modules/babel-loader/lib/index.js","mtime":1615556821330},{"path":"/Users/i5/Documents/Documents/Docs/CODE/5th Semester/APP.cli/luxguitar/node_modules/cache-loader/dist/cjs.js","mtime":1615556830744},{"path":"/Users/i5/Documents/Documents/Docs/CODE/5th Semester/APP.cli/luxguitar/node_modules/vue-loader/lib/index.js","mtime":1615556831649}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport fretSlot from \"../utils/fretSlot\";\nexport default {\n  name: \"Fretboard\",\n  data: function data() {\n    return {\n      numberOfStrings: 6,\n      numberOfFrets: 20,\n      stringLength: 647.7,\n      notes: [\"C\", \"C♯/D♭\", \"D\", \"D♯/E♭\", \"E\", \"F\", \"F♯/G♭\", \"G\", \"G♯/A♭\", \"A\", \"A♯/B♭\", \"B\"],\n      colors: [\"#7FDBFF\", \"#39CCCC\", \"#3D9970\", \"#2ECC40\", \"#01FF70\", \"#FFDC00\", \"#FF851B\", \"#FF4136\", \"#85144b\", \"#F012BE\", \"#B10DC9\", \"#0074D9\"],\n      tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"],\n      areCircles: true,\n      notePattern: []\n    };\n  },\n  computed: {\n    fretboardSlotsAmount: function fretboardSlotsAmount() {\n      return this.numberOfStrings * this.numberOfFrets;\n    },\n    fretDistances: function fretDistances() {\n      var fretDist = []; // Adjustment for screen resolution distance discrepancies\n\n      var newLength = this.stringLength * 0.867469097; // let newLength = this.stringLength * 0.85981;\n      // let newLength = this.stringLength * 0.85981551561;\n\n      for (var i = 0; i < this.numberOfFrets; i++) {\n        var d = newLength / 17.817;\n        fretDist.push(d);\n        newLength = newLength - d;\n      } // We substract the edge of the display on the side of the guitar nut\n\n\n      fretDist[0] -= 3.37;\n      return fretDist;\n    },\n    fretboardLength: function fretboardLength() {\n      return this.fretDistances.reduce(function (sum, elem) {\n        return sum + elem;\n      });\n    },\n    fretboardGridStyle: function fretboardGridStyle() {\n      var fretDist = this.fretDistances.join(\"mm \");\n      return {\n        gridTemplateColumns: fretDist + \"mm\",\n        gridTemplateRows: \"repeat(\" + this.numberOfStrings + \", 1fr )\",\n        width: this.fretboardLength + \"mm\"\n      };\n    }\n  },\n  methods: {\n    debug: function debug() {\n      console.log(this.fretboardSlots);\n    },\n    fretboardSlots: function fretboardSlots(selectedNotes) {\n      var fretboardSlots = [];\n\n      for (var i = this.tuning.length - 1; i >= 0; i--) {\n        var firstNoteOfString = this.tuning[i];\n\n        for (var j = 0; j < this.numberOfFrets; j++) {\n          var noteIndex = (j + this.notes.indexOf(firstNoteOfString) + 1) % 12;\n          var note = this.notes[noteIndex];\n          var color = \"\";\n\n          if (selectedNotes.includes(noteIndex)) {\n            color = this.colors[noteIndex];\n            fretboardSlots.push(new fretSlot(note, i, j, color, note, this.areCircles));\n          } else if (selectedNotes.length > 0) {\n            color = \"black\";\n            fretboardSlots.push(new fretSlot(note, i, j, color, \"\", this.areCircles, \"1px solid white\"));\n          } else {\n            color = this.colors[noteIndex];\n            fretboardSlots.push(new fretSlot(note, i, j, color, note, this.areCircles));\n          }\n        }\n      }\n\n      return fretboardSlots;\n    },\n    fretStyle: function fretStyle(fretSlot) {\n      if (fretSlot.isCircle == true) {\n        return {\n          display: \"grid\",\n          placeItems: \"center\",\n          backgroundColor: fretSlot.color,\n          width: \"20px\",\n          height: \"20px\",\n          borderRadius: \"50%\",\n          border: fretSlot.border\n        };\n      } else {\n        return {\n          display: \"grid\",\n          placeItems: \"center\",\n          backgroundColor: fretSlot.color,\n          width: \"100%\",\n          height: \"100%\"\n        };\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$parent.$on(\"note-pattern\", function (data) {\n      _this.notePattern = data;\n    });\n    this.$parent.$on(\"are-circles\", function (data) {\n      console.log(data);\n      _this.areCircles = data;\n    });\n  }\n};",{"version":3,"sources":["Fretboard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div class=\"the-grid\" :style=\"fretboardGridStyle\" @click=\"debug\">\n      <div\n        v-bind:style=\"{ display: 'grid', placeItems: 'center' }\"\n        v-for=\"(fretSlot, index) in fretboardSlots(notePattern)\"\n        :key=\"index\"\n      >\n        <div :style=\"fretStyle(fretSlot)\">\n          {{ fretSlot.text }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport fretSlot from \"../utils/fretSlot\";\n\nexport default {\n  name: \"Fretboard\",\n  data() {\n    return {\n      numberOfStrings: 6,\n      numberOfFrets: 20,\n      stringLength: 647.7,\n      notes: [\n        \"C\",\n        \"C♯/D♭\",\n        \"D\",\n        \"D♯/E♭\",\n        \"E\",\n        \"F\",\n        \"F♯/G♭\",\n        \"G\",\n        \"G♯/A♭\",\n        \"A\",\n        \"A♯/B♭\",\n        \"B\"\n      ],\n      colors: [\n        \"#7FDBFF\",\n        \"#39CCCC\",\n        \"#3D9970\",\n        \"#2ECC40\",\n        \"#01FF70\",\n        \"#FFDC00\",\n        \"#FF851B\",\n        \"#FF4136\",\n        \"#85144b\",\n        \"#F012BE\",\n        \"#B10DC9\",\n        \"#0074D9\"\n      ],\n      tuning: [\"E\", \"A\", \"D\", \"G\", \"B\", \"E\"],\n      areCircles: true,\n      notePattern: []\n    };\n  },\n  computed: {\n    fretboardSlotsAmount: function() {\n      return this.numberOfStrings * this.numberOfFrets;\n    },\n    fretDistances() {\n      let fretDist = [];\n      // Adjustment for screen resolution distance discrepancies\n      let newLength = this.stringLength * 0.867469097;\n      // let newLength = this.stringLength * 0.85981;\n      // let newLength = this.stringLength * 0.85981551561;\n      for (let i = 0; i < this.numberOfFrets; i++) {\n        let d = newLength / 17.817;\n        fretDist.push(d);\n        newLength = newLength - d;\n      }\n      // We substract the edge of the display on the side of the guitar nut\n      fretDist[0] -= 3.37;\n      return fretDist;\n    },\n    fretboardLength() {\n      return this.fretDistances.reduce((sum, elem) => sum + elem);\n    },\n    fretboardGridStyle() {\n      let fretDist = this.fretDistances.join(\"mm \");\n      return {\n        gridTemplateColumns: fretDist + \"mm\",\n        gridTemplateRows: \"repeat(\" + this.numberOfStrings + \", 1fr )\",\n        width: this.fretboardLength + \"mm\"\n      };\n    }\n  },\n  methods: {\n    debug() {\n      console.log(this.fretboardSlots);\n    },\n    fretboardSlots(selectedNotes) {\n      let fretboardSlots = [];\n      for (let i = this.tuning.length - 1; i >= 0; i--) {\n        let firstNoteOfString = this.tuning[i];\n        for (let j = 0; j < this.numberOfFrets; j++) {\n          let noteIndex = (j + this.notes.indexOf(firstNoteOfString) + 1) % 12;\n          let note = this.notes[noteIndex];\n          let color = \"\";\n          if (selectedNotes.includes(noteIndex)) {\n            color = this.colors[noteIndex];\n            fretboardSlots.push(\n              new fretSlot(note, i, j, color, note, this.areCircles)\n            );\n          } else if (selectedNotes.length > 0) {\n            color = \"black\";\n            fretboardSlots.push(\n              new fretSlot(\n                note,\n                i,\n                j,\n                color,\n                \"\",\n                this.areCircles,\n                \"1px solid white\"\n              )\n            );\n          } else {\n            color = this.colors[noteIndex];\n            fretboardSlots.push(\n              new fretSlot(note, i, j, color, note, this.areCircles)\n            );\n          }\n        }\n      }\n      return fretboardSlots;\n    },\n    fretStyle(fretSlot) {\n      if (fretSlot.isCircle == true) {\n        return {\n          display: \"grid\",\n          placeItems: \"center\",\n          backgroundColor: fretSlot.color,\n          width: \"20px\",\n          height: \"20px\",\n          borderRadius: \"50%\",\n          border: fretSlot.border\n        };\n      } else {\n        return {\n          display: \"grid\",\n          placeItems: \"center\",\n          backgroundColor: fretSlot.color,\n          width: \"100%\",\n          height: \"100%\"\n        };\n      }\n    }\n  },\n  mounted() {\n    this.$parent.$on(\"note-pattern\", data => {\n      this.notePattern = data;\n    });\n    this.$parent.$on(\"are-circles\", data => {\n      console.log(data);\n      this.areCircles = data;\n    });\n  }\n};\n</script>\n\n<style scoped>\n.the-grid {\n  display: grid;\n  height: 100%;\n  background-color: black;\n}\n</style>\n"],"sourceRoot":"src/components"}]}